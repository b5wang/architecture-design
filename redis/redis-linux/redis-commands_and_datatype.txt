# -----------------------------------------------------
# 1. string
Redis strings store sequences of bytes, including 
    - text
    - serialized objects
    - binary arrays
As such, strings are the simplest type of value you can associate with a Redis key. They're often used for caching, 
but they support additional functionality that lets you implement counters and perform bitwise operations, too.

Redis key itself is string.
# connect to remote redis
$ ./redis-cli -h 127.0.0.1 -p 6379

# set key value
127.0.0.1:6379> set max_connection 5
OK
# get value by key
127.0.0.1:6379> get max_connection
"5"

# set and get at the same time
127.0.0.1:6379> getset max_connection 10
"5"
127.0.0.1:6379> get max_connection
"10"

# set and get multiple key value pairs
127.0.0.1:6379> mset max_queue 1000 queue_timeout 30000
OK
127.0.0.1:6379> mget max_queue queue_timeout
1) "1000"
2) "30000"

# String as counter
127.0.0.1:6379> set access_counter "0"
OK
127.0.0.1:6379> incr access_counter
(integer) 1
127.0.0.1:6379> incr access_counter
(integer) 2
127.0.0.1:6379> incr access_counter
(integer) 3
127.0.0.1:6379> incrby access_counter 100
(integer) 103
127.0.0.1:6379> decr access_counter
(integer) 102
127.0.0.1:6379> decrby access_counter 10
(integer) 92

# Limits: By default, a single Redis string can be a maximum of 512 MB.

# Use string as a lock: setnx, set a key-value pair only if the key does not exist
127.0.0.1:6379> setnx transaction_lock_123400987 "1"
(integer) 1

# Performance:
Most string operations are O(1), which means they're highly efficient. 
However, be careful with the SUBSTR, GETRANGE, and SETRANGE commands, which can be O(n). 
These random-access string commands may cause performance issues when dealing with large strings.



# -----------------------------------------------------
# 2. List. Redis lists are linked lists of string values. Redis lists are frequently used to:
# 2.1 Implement stacks and queues. Stack: last in, first out. Queue: first in, first out
# 2.2 Build queue management for background worker systems.
# -----
# List operation
- LPUSH adds a new element to the head of a list; RPUSH adds to the tail.
- LPOP removes and returns an element from the head of a list; RPOP does the same but from the tails of a list.
  BLPOP, BRP
- LLEN returns the length of a list.
- LMOVE atomically moves elements from one list to another.
  For example,
  lmove list1 list left left
- LTRIM reduces a list to the specified range of elements. 
  *** Capped a list
  ltrim <list> <start> <end>
- LRANGE Show a list.
  For exmaple,
  lrange <list_name> <start_index> <end_index>

# Block commands:
- BLPOP removes and returns an element from the head of a list. If the list is empty, the command blocks until an element becomes available or until the specified timeout is reached.
- BLMOVE atomically moves elements from a source list to a target list. If the source list is empty, the command will block until a new element becomes available.

# -----
# A Stack: last in, first out. Add and get element from the same side
127.0.0.1:6379> lpush stack_1 1
(integer) 1
127.0.0.1:6379> lpush stack_1 2
(integer) 2
127.0.0.1:6379> lpush stack_1 3
(integer) 3
127.0.0.1:6379> lpush stack_1 4
(integer) 4
127.0.0.1:6379> lpush stack_1 5
(integer) 5
127.0.0.1:6379> lpop stack_1
"5"
127.0.0.1:6379> lpop stack_1
"4"
127.0.0.1:6379> lpop stack_1
"3"
127.0.0.1:6379> lpop stack_1
"2"
127.0.0.1:6379> lpop stack_1
"1"

# A queue: first in, first out
127.0.0.1:6379> rpush stack_2 1
(integer) 1
127.0.0.1:6379> rpush stack_2 2
(integer) 2
127.0.0.1:6379> rpush stack_2 3
(integer) 3
127.0.0.1:6379> rpush stack_2 4
(integer) 4
127.0.0.1:6379> rpush stack_2 5
(integer) 5
127.0.0.1:6379> lpop stack_2
"1"
127.0.0.1:6379> lpop stack_2
"2"
127.0.0.1:6379> lpop stack_2
"3"
127.0.0.1:6379> lpop stack_2
"4"
127.0.0.1:6379> lpop stack_2
"5"

# -----
# Common use cases for lists:
- Remember the latest updates posted by users into a social network.
- Communication between processes, using a consumer-producer pattern where the producer pushes items into a list, 
  and a consumer (usually a worker) consumes those items and executes actions. Redis has special list commands to make this use case both more reliable and efficient.


